package com.boot.controller;

import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.boot.exception.ApiResponse;
import com.boot.payload.AllocateProjectDTO;
import com.boot.service.AllocateProjectService;




@CrossOrigin("*")
@RestController
@RequestMapping("/allocateProject")
public class AllocateProjectController 
{
	
	@Autowired
	private AllocateProjectService allocateprojectService;
	@PostMapping("/")
	@RequestMapping(value="/",method=RequestMethod.POST)
    public ResponseEntity<AllocateProjectDTO> addAllocateProject(@Valid @RequestBody AllocateProjectDTO allocateprojectDTO)
    {
		AllocateProjectDTO addedAllocateProject = this.allocateprojectService.addAllocateProject(allocateprojectDTO);
    
    	return new ResponseEntity<AllocateProjectDTO>(addedAllocateProject,HttpStatus.CREATED);
    }
	
	@GetMapping("/")
	public ResponseEntity<List<AllocateProjectDTO>> getAllAllocateProject()
	{
		List<AllocateProjectDTO> AllocateProjectList = this.allocateprojectService.getAllAllocateProjectList();
		return new ResponseEntity<List<AllocateProjectDTO>>(AllocateProjectList,HttpStatus.OK);
		
   }
   
	@GetMapping("/{allocateprojectId}")
	public ResponseEntity<AllocateProjectDTO> getAllocateProjectById(@PathVariable("AllocateProjectId") int AllocateProjectId)
	{
		AllocateProjectDTO  AllocateProject = this.allocateprojectService.getAllocateProjectById(AllocateProjectId);
		return new ResponseEntity<AllocateProjectDTO>(AllocateProject,HttpStatus.OK);
	}
	
	@PutMapping("/{allocateprojectId}")
	public ResponseEntity<AllocateProjectDTO> updateAllocateProjectId(@Valid @RequestBody AllocateProjectDTO AllocateProject,@PathVariable("allocateprojectId") int allocateprojectId)
	{
		AllocateProjectDTO updatedAllocateProject = this.allocateprojectService.updateAllocateProjectById(AllocateProject, allocateprojectId);
		return new ResponseEntity<AllocateProjectDTO>(updatedAllocateProject,HttpStatus.OK);
	}
	
	@DeleteMapping("/{allocateprojectId}")
	public ResponseEntity<ApiResponse> deleteAllocateProject(@PathVariable("allocateprojectId")int allocateprojectId)
	{
		this.allocateprojectService.deleteAllocateProjectById(allocateprojectId);
		
		ApiResponse response=new ApiResponse();
		
		response.setMessage(" AllocateProject record is deleted with AllocateProject Id: "+allocateprojectId);
		
		response.setStatus(true);
		//return null;
	    return new ResponseEntity<ApiResponse>(response,HttpStatus.OK);
	    			
	}

}