package com.boot.serviceimplementation;

import java.util.List;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.boot.entity.ProjectEntity;
import com.boot.exception.ResourceNotFoundException;
import com.boot.payload.ProjectDTO;
import com.boot.repository.DepartmentRepository;
import com.boot.repository.EmployeeRepository;
import com.boot.repository.ProjectRepository;
import com.boot.service.ProjectService;



@Service
public class ProjectServiceImplementation  implements ProjectService
{
	@Autowired
	private ProjectRepository projectRepository;  
	
	@Autowired
	private ModelMapper modelMapper;

	@Override
	public ProjectDTO addProject(ProjectDTO project)
	{
	 	ProjectEntity projectEntity= this.modelMapper.map(project, ProjectEntity.class);
		ProjectEntity savedProject =this.projectRepository.save(projectEntity);
	 	
		return this.modelMapper.map(savedProject, ProjectDTO.class);
}

	@Override
	public List<ProjectDTO> getAllProject() {
		
		List<ProjectEntity> projectList = this.projectRepository.findAll();
		List<ProjectDTO>  projectDTOList = projectList.stream().map(project->this.
				modelMapper.map(project, ProjectDTO.class))
				.collect(Collectors.toList());
		return projectDTOList;
	
	}

	@Override
	public ProjectDTO getProjectById(int projectId) {
      
		
		if(this.projectRepository.existsById(projectId)) 
		{
			ProjectEntity projectEntity = this.projectRepository.findById(projectId).get();
			
			return this.modelMapper.map(projectEntity, ProjectDTO.class);
		}
		else
		{
			throw new ResourceNotFoundException("project","ProjectId", projectId);
		}

	}

	

	@Override
	public void deleteProjectById(int projectId) {
		// TODO Auto-generated method stub
		if(this.projectRepository.existsById(projectId))
		{
			this.projectRepository.deleteById(projectId);
		}
		else 
		{
			 throw new ResourceNotFoundException("project","ProjectId", projectId);
		}
	}

	@Override
	public ProjectDTO updateProjectById(ProjectDTO project, int projectId) {
		if(this.projectRepository.existsById(projectId)) 
		{
			ProjectEntity projectObj = this.modelMapper.map(project, ProjectEntity.class);
			ProjectEntity updateproject = this.projectRepository.save(projectObj);
			
			return this.modelMapper.map(updateproject, ProjectDTO.class);
		}
		else
		{
			throw new ResourceNotFoundException("project","ProjectId", projectId);
		}

	}


	
}